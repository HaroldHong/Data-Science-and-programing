mydata = read.csv("house_info.csv")
source('~/GitHub/Data-Science-and-programing/week3/course.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/Data-Science-and-programing/week3/course.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/Data-Science-and-programing/week3/course.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/Data-Science-and-programing/week3/course.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/Data-Science-and-programing/week3/course.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/Data-Science-and-programing/week3/course.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/Data-Science-and-programing/week3/course.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/Data-Science-and-programing/week3/course.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/Data-Science-and-programing/week3/course.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/Data-Science-and-programing/week3/course.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/Data-Science-and-programing/week3/course.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/Data-Science-and-programing/week3/course.R', encoding = 'UTF-8', echo=TRUE)
#my.plot <- ggplot(data = mydata,aes(x = 面积,y = 月租,colour=房屋结构))+geom_point()
var <- mydata$朝向 #the categorical data
nrows <- 10
source('~/GitHub/Data-Science-and-programing/week3/course.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/Data-Science-and-programing/week3/course.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/Data-Science-and-programing/week3/course.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/Data-Science-and-programing/week3/course.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/Data-Science-and-programing/week3/course.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/Data-Science-and-programing/week3/course.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/Data-Science-and-programing/week3/course.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/Data-Science-and-programing/week3/course.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/Data-Science-and-programing/week3/course.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/Data-Science-and-programing/week3/course.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/Data-Science-and-programing/week3/course.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/Data-Science-and-programing/week3/course.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/Harold/Desktop/1358652-800cb82faa7c9ab32ea123b32ebc9590a13d0ec6/1358652-800cb82faa7c9ab32ea123b32ebc9590a13d0ec6/tbwaffles.r', echo=TRUE)
source('C:/Users/Harold/Desktop/1358652-800cb82faa7c9ab32ea123b32ebc9590a13d0ec6/1358652-800cb82faa7c9ab32ea123b32ebc9590a13d0ec6/tbwaffles.r', echo=TRUE)
# Waffles
# How many rows do you want the y axis?
ndeep <- 5
# I need to convert my data into a data.frame with a unique specified x
# and y axis for each case
# Note - it's actually important to specify y first for a
# horizontally-accumulating waffle
tb4waffles <- expand.grid(y = 1:ndeep,
x = seq_len(ceiling(sum(tb$ncases) / ndeep)))
# Expand the counts into a full vector of region labels - i.e., de-aggregate
regionvec <- rep(tb$region, tb$ncases)
# Depending on the value of ndeep, there might be more spots on the x-y grid
# than there are cases - so fill those with NA
tb4waffles$region <- c(regionvec, rep(NA, nrow(tb4waffles) - length(regionvec)))
# Plot it
ggplot(tb4waffles, aes(x = x, y = y, fill = region)) +
geom_tile(color = "white") + # The color of the lines between tiles
scale_fill_manual("Region of Birth",
values = RColorBrewer::brewer.pal(5, "Dark2")) +
opts(title = "TB Cases by Region of Birth")
# Plot it
ggplot(tb4waffles, aes(x = x, y = y, fill = region)) +
geom_tile(color = "white") + # The color of the lines between tiles
scale_fill_manual("Region of Birth",
values = RColorBrewer::brewer.pal(5, "Dark2"))
source('~/GitHub/Data-Science-and-programing/week3/course.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/Data-Science-and-programing/week3/course.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/Data-Science-and-programing/week3/course.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/Data-Science-and-programing/week3/course.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/Harold/Desktop/1358652-800cb82faa7c9ab32ea123b32ebc9590a13d0ec6/1358652-800cb82faa7c9ab32ea123b32ebc9590a13d0ec6/tbwaffles.r', echo=TRUE)
# Plot it
ggplot(tb4waffles, aes(x = x, y = y, fill = region)) +
geom_tile(color = "white") + # The color of the lines between tiles
scale_fill_manual("Region of Birth",
values = RColorBrewer::brewer.pal(5, "Dark2"))
# Plot it
ggplot(tb4waffles, aes(x = x, y = y, fill = region)) +
geom_tile(color = "white") + # The color of the lines between tiles
# Plot it
ggplot(tb4waffles, aes(x = x, y = y, fill = region)) +
geom_tile(color = "white") + # The color of the lines between tiles
source('~/GitHub/Data-Science-and-programing/week3/course.R', encoding = 'UTF-8', echo=TRUE)
## ggplot
ggplot(df, aes(x = x ,y = y, fill = category)) +
geom_tile(color = "black", size = 0.5) +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
scale_fill_brewer(palette = "Set3") +
labs(title ="Waffle Chart",subtitle = "'Class'of 朝向",caption = "Source: mydata" )
## ggplot
ggplot(df, aes(x = x ,y = y, fill = category)) +
geom_tile(color = "black", size = 0.5) +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
scale_fill_brewer(palette = "Set3") +
labs(title ="Waffle Chart",subtitle = "'Class'of 朝向",caption = "Source: mydata" )
install.packages("ggExtra")
#Boxplot
library(ggExtra)
theme_set(theme_bw())
g <- ggplot(mydata, aes(x = 面积.平方米.,y = 平米月租)) +
geom_count() +
geom_smooth(method = 'lm', se = F)
ggMarginal(g, type = "histogram", fill = "transparent")
ggMarginal(g, type = "boxplot", fill = "transparent")
#Boxplot
library(ggExtra)
theme_set(theme_bw())
data_select <- mydata[mydata$面积.平方米. < 250, ]
g <- ggplot(data_select, aes(x = 面积.平方米.,y = 平米月租)) +
geom_count() +
geom_smooth(method = 'lm', se = F)
ggMarginal(g, type = "histogram", fill = "transparent")
ggMarginal(g, type = "boxplot", fill = "transparent")
ggMarginal(g, type = "histogram", fill = "transparent")
data_select <- mydata[mydata$面积.平方米. < 250, ]
g <- ggplot(data_select, aes(x = 面积.平方米.,y =月租)) +
geom_count() +
geom_smooth(method = 'lm', se = F)
ggMarginal(g, type = "histogram", fill = "transparent")
#Histogram on a continuous variable
theme_set(theme_classic())
g <- ggplot(data_select,aes(平米月租)) + scale_fill_brewer(palette = "Spectral") +
geom_histogram(aes(fill = 房屋结构),
bindwidth = .1,
col = "black",
size = .1)
plot(g)
install.packages("GGally")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages('scales')
install.packages('MASS')
install.packages('car')
install.packages('plyr')
install.packages('reshape')
##ggpairs
library('GGally')
##ggpairs
library(ggplot2)
library('GGally')
library('scales')
library('MASS')
library('car')
library('plyr')
library('reshape')
set.seed(2022012)
ggpairs(data_select,params =
c(shape = I('.'),outlier.shape = I('.')))
install.packages('scales')
install.packages("scales")
library('plyr')
##ggpairs
library(ggplot2)
library('GGally')
library('scales')
library('MASS')
library('plyr')
library('reshape')
set.seed(2022012)
ggpairs(data_select,params =
c(shape = I('.'),outlier.shape = I('.')))
library('reshape')
set.seed(2022012)
ggpairs(data_select,lower= list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
house_sample <- mydata[sample(1:length(mydata$小区),100),]
ggpairs(data_select,lower= list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
house_sample <- mydata[mydata$房屋结构,mydata$朝向,mydata$面积.平方米.,
mydata$月租,mydata$平米月租]
house_sample <- mydata[mydata$房屋结构,mydata$朝向,mydata$面积.平方米.,
mydata$月租,mydata$平米月租,]
house_sample <- data.frame(c(mydata$房屋结构),c(mydata$朝向),c(mydata$面积.平方米.),
c(mydata$月租),c(mydata$平米月租))
ggpairs(data_select,lower= list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
ggpairs(house_sample,lower= list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
install.packages('reshape')
house_sample <- data.frame(c(mydata$房屋结构),c(mydata$朝向),c(mydata$面积.平方米.),
c(mydata$月租),c(mydata$平米月租))
ggpairs(house_sample,lower= list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
source('~/GitHub/Data-Science-and-programing/week3/hw_3/course.R', encoding = 'UTF-8', echo=TRUE)
